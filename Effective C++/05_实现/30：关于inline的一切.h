#pragma once

/*
	inline在编译期将函数体在调用处展开，节省开辟函数栈的开销

	inline可能可以加快程序，但是inline后的程序体积会更大。假如因为体积变大而降低了缓存命中
	inline反而会拖慢速度。因此inline更适合于小型的、调用次数多的函数

	inline只是建议，编译器并不一定采纳

	函数模板可以inline，而且函数模板通常定义于头文件，也符合inline的条件
	但不意味着函数模板必须inline

	虚函数inline一定失败

	inline成功不意味着原函数消失，依然可以用函数指针取得原函数并通过函数指针调用

	构造、析构看起来很短，但实际上会被编译器插入很多代码，所以不要考虑它们的inline

	inline的库函数修改，客户程序需要重新编译；而非inline的库函数修改，客户程序只需重新链接

	inline函数无法调试

	建议：不要考虑inline。直到需要开始优化程序了，找到程序的性能的瓶颈，再开始inline瓶颈里的函数
*/