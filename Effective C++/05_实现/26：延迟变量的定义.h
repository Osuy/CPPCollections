#pragma once
/*
	尽量延后定义变量的时间
	如果变量定义和使用的时机之间存在其他操作
	而这些操作有可能会抛出异常地话，那定义变量还未使用就被释放，完全变成多余的
	延后定义不代表在使用前一刻才定义，而是更晚，晚到明确需要将变量初始化时才定义
*/
namespace case26
{
class Test1
{
public:
	Test1() {} // 无参构造
	Test1(int) {} // 单参int构造，非explicit，因此可以用int隐式构造
};

void func()
{
	Test1 t;
	{
		// 其他过程，有可能抛出异常
	}
	// 这里才开始使用t
}
/*
	不仅延迟到使用前定义，还延迟到可以被初始化时

	// 其他操作
	int a = 2;
	Test1 t;
	t = a;

	// 其他操作
	int a = 2;
	Test1 t(a);

	后者的好处是减少了一次拷贝构造，t = a;本质是一次拷贝构造，而t定义时也有一次构造
	显然无需对t构造两次，把t延后到明确可以初始化时才定义，会有更好的性能

	更有甚者，如果变量是作为函数的返回值，那么或许可以直接将初始值返回
*/

Test1 func4()
{
	int a = 2;
	return a;// 利用隐式构造
}
/*
	这利用了返回值的机制，按值返回也会经历一次拷贝构造，而如果直接把对象构造所需的参数返回
	编译器会用这些参数构造返回值，从而又减少了一次构造


	对于for循环，变量声明在循环体里面和外面该如何决定？
	声明在里面具有更好的可读性，假若对性能不敏感，应该声明在里面
	另外，细说二者的性能差

		声明在外面：一次构造，n次拷贝，一次析构
		声明在里面：n次构造，n次析构

	即：当类的一次拷贝所需的代价大于一次构造+一次析构时，声明在里面才会有更好的性能

	而一次拷贝显然和一次构造的性能是接近的，几乎可以说，声明在外面性能总之比里面更好
	不过对于哪些pob类型，二者的性能上的差异微乎其微，为了可读性，可以声明在里面
*/
}