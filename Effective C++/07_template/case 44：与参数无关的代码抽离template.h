#pragma once
/*
	与参数无关的代码抽离template

	即使利用template具象化的代码，仍然存在许多重复
	可以将模板中共性的部分独立出来，然后所有模板去调用共性部分
	通过抽象共性部分，可以降低膨胀，提高缓存命中，会有更好的性能

	对于类型模板参数，
		如int和long，都是32位整数，但是却有独立的具象化版本而造成膨胀
		有些链接器会将重复的实现码合并，
		再如指针，虽然所有指针都是32位地址，但是T*确实会被认为是不同的类型
		而对于指针，其类型的功能不是共性，但操作内存都是共性
		因此可以可以用void*去完成操作内存的部分

		stl容器对于指针元素，就在底层利用void*去实现所有共性的功能
		标准库的做法也说明了建议将共性抽离template来降低代码膨胀
	
	只有一种例外
	如果模板参数是非类型参数size_t，且数值很小的情况
	低数值常量在具象化时，可能会被编译器优化，折进生成二进制码中成为直接操作数，这样会更快
*/