#pragma once

/*
	观察者模式，也称订阅模式

	需要实现一种关系，类A负责通知类B。
	传统实现方法是：
		类A内部有一个B类指针，类A的函数notify内部包含语句b_obj->update();

	但是这种实现不易扩展，如果希望支持一个A类对象通知多个其他对象，就需要不停的修改，加入新的指针成员
	更合适的方法是：
		定义一个父类，包含纯虚函数update；所有需要被通知的类都继承自这个类
		通知类内部有一个链表成员，负责容纳被通知类，然后在函数notify内决定何时调用不同对象的update

	本质上是，A想通知B，今后可能会通知C，或者通知若干个对象
	将这些对象都继承自虚基类observer，它内部有虚函数update，子类需重写
	A类保存一个指针容器，指向所有它想通知的对象的指针（基类指针）
*/