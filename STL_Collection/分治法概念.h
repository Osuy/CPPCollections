#pragma once
/*
    递归的概念
    递归是指子程序或函数直接调用自己或通过一系列调用语句间接调用自己。使用递归的技术往往使函数的定义和算法的描述简介易于理解。

    递归要素
    边界条件：确定递归何种情况终止
    递归模式：如何将大问题分解成重复的小问题


    递归例子
    阶乘函数：n!= 1[n = 0]; n(n - 1)![n > 0]
    n = 0就是递归的边界条件，n乘(n - 1)!是递归模式
    因此阶乘函数可以写成
*/

int Factorial(int n)
{
    if (n == 0) return 1;
    if (n > 0) return n * Factorial(n - 1);
}

/*
    分治法的基本思想
    本质是利用递归，将大问题拆分为小问题解决
    分解：找出小问题
    求解：设计递归模式
    合并：返回调用值
*/

//例子：归并排序
void MergeSort(int* A, int p, int r)
{
    int q;
    if (p < r)
    {
        q = (p + r) / 2;
        MergeSort(A, p, q);
        MergeSort(A, q + 1, r);
        Merge(A, p, q, r);//Merge的具体实现省略
    }
}
/*
    对于一个需要排序的序列，先将序列一分为二，对两个子序列排序，完成后再合并排序。
    而对子序列的排序是重复的过程，因此递归调用自身
    边界条件是左索引 >= 右索引
*/