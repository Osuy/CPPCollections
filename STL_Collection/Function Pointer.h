#pragma once

/*
	【函数指针】
	函数指针即是指向函数体代码的内存地址的指针。函数名即是一个函数指针
	函数指针的声明与其他指针有所不同，需要包含返回值和参数，且需要*号前缀。
	因为编译器会把返回值与前缀的*号一起视为：返回某类型的指针。因此函数指针还需要加上括号：
	int (*pr)(int a);
	以上，声明了一个返回类型为int，参数为一个int的函数指针。两个括号都是必须的。
	试想，将(*pr)视为一个标识符，比如(*pr)=pa
	那么pa是函数。pr是指向pa的指针，pr自然是函数指针。
	反过来理解，(*pr)是提领后的东西，是函数，那么pr就是函数指针。

	对函数指针的初始化，只需要将这个指针指向一个满足条件的函数名即可
	int f1(int a);
	pr = f1;//这一步将pr指向f1，因为函数名是指针，所以能够赋值成功
	又或者声明时直接初始化：
	int (*pr)(int a) = f1;//声明+初始化
	注意，初始化会进行返回值和参数的类型检查，因此和其他=操作一样会因类型不匹配而报错

	以下两种调用方式：
	int a=3;
	pr(a);
	(*pr)(a);
	都是允许的，不过第一种使用居多。因为(*pr)作为函数名，自然可以用第二种方式调用
	但是pr和函数名都作为函数指针，调用风格应该一致。
	所以两种调用方式都是可以的。

	【函数指针的简写】
	以下三个函数声明是等价的，但是只有第一个声明可以编写函数体
	int f1(int arr[], int a);
	int f2(int [], int);
	int f3(int*, int);
	对于函数的声明，允许省略参数的标识符。但是函数体如果需要标识符，则只能使用第一种声明。
	然而，函数指针是没有函数体的。也就是说，函数指针的声明，总可以使用第三种写法：
	int (*pr)(int*, int) = f1;//简化写法
	int (*pr)(int arr[], int a);//标准写法
	而对于C++11的新特性auto，可以最简化函数指针的声明，但不利于使用
	auto pr = f1;//最简写法

	【函数指针的数组】
	数组的声明必然带有一个中括号对，假如数组有3个元素。试想[3]应该写在函数指针声明的何处？
	int (*pa[3])(int) = {f1,f2,f3};
	原因显而易见，如果希望pa是数组名，[]自然写在其后。
	写在两个圆括号之间，则会把(*pa)，也就是pa提领后的东西当成数组名。
	调用时直接用数组元素的获取方式来调用：
	pa[1](1);//传1给第一个元素所指的函数指针

	那么又该如何创建指向该数组的指针呢？虽然有了auto后，只需要一句auto pb = pa;
	但是这对于理解函数指针数组不利。
	数组名就是指向第一个元素的指针，因此pa指向第一个函数指针。
	换言之，指向pa，即指向函数指针数组的指针，就是指向函数指针的指针。
	那么具体的声明，需要在
		int (*pa[3])(int);的基础上，多一层提领。（你应该意识到(*pr)这种自带提领声明，pr就是指针）
	即：
		int (*(*pb)[3])(int);//pa用(*pb)替换，于是pb指向pa。当然这只是声明，真正指向pa还需初始化
		pb=&pa;
	调用函数也需要比pa多一层提领
	(*pb)[1](1);

	
*/
